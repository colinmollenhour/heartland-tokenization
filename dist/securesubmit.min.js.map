{"version":3,"file":null,"sources":["../src/HPS.ts"],"sourcesContent":["/// <reference path=\"vars/defaults.ts\" />\n/// <reference path=\"vendor/json2.ts\" />\n\n/// <reference path=\"Ajax.ts\" />\n/// <reference path=\"DOM.ts\" />\n/// <reference path=\"Events.ts\" />\n/// <reference path=\"Frames.ts\" />\n/// <reference path=\"Messages.ts\" />\n/// <reference path=\"Styles.ts\" />\n/// <reference path=\"Util.ts\" />\n\nmodule Heartland {\n  interface Frame {\n    frame?: Window;\n    name?: string;\n    options?: any;\n    target?: string;\n    targetNode?: EventTarget;\n    url?: string;\n  }\n  interface Frames {\n    cardNumber?: Frame;\n    cardExpiration?: Frame;\n    cardCvv?: Frame;\n    submit?: Frame;\n    child?: Frame;\n    parent?: Frame;\n  }\n  /**\n   * Heartland.HPS\n   *\n   * Initializes options and adds the default form handler if a `formId` is\n   * passed as an option. This expects the default fields (see `getFields`) to\n   * be present as children of `formId`.\n   */\n  export class HPS {\n    options: Options;\n    frames: Frames;\n    iframe_url: string;\n    Messages: Messages;\n    mailbox: any; // [];\n    cacheBust: number;\n    parent: Window;\n    field: string;\n    clickHandler: (e: Event) => void;\n    loadHandler: () => void;\n    receiveMessageHandlerAddedHandler: () => void;\n\n    /**\n     * Heartland.HPS (constructor)\n     *\n     * @constructor\n     * @param {Heartland.Options} options [optional]\n     * @returns {Heartland.HPS}\n     */\n    constructor(options?: Options) {\n      if (!options && window.parent) {\n        return;\n      }\n\n      this.options = Heartland.Util.applyOptions(defaults, options);\n      this.options = Heartland.Util.getUrlByEnv(this.options);\n\n      if (this.options.formId.length > 0) {\n        Heartland.Util.addFormHandler(this.options);\n      }\n\n      this.frames = {};\n      if (this.options.type === 'iframe') {\n        this.iframe_url = '';\n\n        this.Messages = new Heartland.Messages(this);\n        this.mailbox = [];\n        this.cacheBust = 1;\n        Heartland.Frames.configureIframe(this);\n      }\n\n      return this;\n    }\n\n    /**\n     * Heartland.HPS.tokenize\n     *\n     * Tokenizes card data. Used in manual integrations where the merchant's\n     * credit card fields cannot/do not match the names expected in the default\n     * form handler (see `getFields`).\n     *\n     * @param {Heartland.Options} options [optional]\n     */\n    tokenize(options?: Options): void {\n      options = options || {};\n      if (options) {\n        this.options = Heartland.Util.applyOptions(this.options, options);\n        this.options = Heartland.Util.getUrlByEnv(this.options);\n      }\n      if (this.options.type === 'iframe') {\n        this.Messages.post(\n          {\n            action: 'tokenize',\n            message: this.options.publicKey\n          },\n          'child'\n        );\n        return;\n      }\n      Heartland.Ajax.call(this.options.type, this.options);\n    };\n\n    /**\n     * Heartland.HPS.configureInternalIframe\n     *\n     * Sets up a child iframe window to prepare it for communication with the\n     * parent and for tokenization.\n     *\n     * @param {Heartland.Options} options\n     */\n    configureInternalIframe(options: Options): void {\n      this.Messages = new Heartland.Messages(this);\n      this.parent = window.parent;\n      this.frames = this.frames || {};\n      this.frames.parent = {\n        frame: window.parent,\n        name: 'parent',\n        url: decodeURIComponent(document.location.hash.replace(/^#/, ''))\n      };\n\n      this.loadHandler = (function (hps: HPS) {\n        return function () {\n          Heartland.DOM.resizeFrame(hps);\n        };\n      }(this));\n\n      this.receiveMessageHandlerAddedHandler = (function (hps: HPS) {\n        return function () {\n          hps.Messages.post({action: 'receiveMessageHandlerAdded'}, 'parent');\n        };\n      }(this));\n\n      Heartland.Events.addHandler(window, 'load', this.loadHandler);\n      Heartland.Events.addHandler(document, 'receiveMessageHandlerAdded', this.receiveMessageHandlerAddedHandler);\n\n      this.Messages.receive(Heartland.Events.frameHandleWith(this), '*');\n    };\n\n    /**\n     * Heartland.HPS.configureButtonFieldIframe\n     *\n     * Same as `Heartland.HPS.configureFieldIframe` excet the added click event\n     * handler for the button.\n     *\n     * @param {Heartland.Options} options\n     */\n    configureButtonFieldIframe(options: Options): void {\n      this.configureFieldIframe(options);\n      Heartland.Events.addHandler('heartland-field', 'click', (function (hps: HPS) {\n        return function (e: Event) {\n          e.preventDefault ? e.preventDefault() : (e.returnValue = false);\n          hps.Messages.post({action: 'requestTokenize'}, 'parent');\n        };\n      }(this)));\n    }\n\n    /**\n     * Heartland.HPS.configureFieldIframe\n     *\n     * Sets up a child iframe window to prepare it for communication with the\n     * parent and for tokenization.\n     *\n     * @param {Heartland.Options} options\n     */\n    configureFieldIframe(options: Options): void {\n      var hash = document.location.hash.replace(/^#/, '');\n      var split = hash.split(':');\n      this.Messages = new Heartland.Messages(this);\n      this.field = split.shift();\n      this.parent = window.parent;\n      this.frames = this.frames || {};\n      this.frames.parent = {\n        frame: window.parent,\n        name: 'parent',\n        url: decodeURIComponent(split.join(':').replace(/^:/, ''))\n      };\n\n      window.onerror = (function (hps: HPS) {\n        return function (errorMsg: string, url: string, lineNumber: number, column: number, errorObj: any) {\n          hps.Messages.post({\n            action: 'error',\n            data: {\n              column: column,\n              errorMsg: errorMsg,\n              lineNumber: lineNumber,\n              url: url\n            }\n          }, 'parent');\n          return true;\n        };\n      }(this));\n\n      this.loadHandler = (function (hps: HPS) {\n        return function () {\n          Heartland.DOM.resizeFrame(hps);\n          Heartland.DOM.configureField(hps);\n          var method = 'attach' + window.name.replace('card', '') + 'Events';\n          if ((<any>Heartland.Card)[method]) {\n            (<any>Heartland.Card)[method]('#heartland-field');\n          }\n        };\n      }(this));\n\n      this.receiveMessageHandlerAddedHandler = (function (hps: HPS) {\n        return function () {\n          hps.Messages.post({action: 'receiveMessageHandlerAdded'}, 'parent');\n        };\n      }(this));\n\n      Heartland.Events.addHandler(window, 'load', this.loadHandler);\n      Heartland.Events.addHandler(document, 'receiveMessageHandlerAdded', this.receiveMessageHandlerAddedHandler);\n      Heartland.Frames.monitorFieldEvents(this, 'heartland-field');\n\n      this.Messages.receive(Heartland.Events.frameHandleWith(this), '*');\n    };\n\n    /**\n     * Heartland.HPS.resizeIFrame\n     *\n     * Called automatically when the child iframe window alerts the parent to\n     * resize.\n     *\n     * @param {HTMLIFrameElement} frame\n     * @param {string} height\n     */\n    resizeIFrame(frame: HTMLIFrameElement, height: string): void {\n      if (!frame) { return; }\n      frame.style.height = (parseInt(height, 10)) + 'px';\n    };\n\n    /**\n     * Heartland.HPS.setText\n     *\n     * Public API for setting an element's inner text.\n     *\n     * @param {string} elementid\n     * @param {string} elementtext\n     */\n    setText(elementid: string, elementtext: string): void {\n      this.Messages.post({action: 'setText', id: elementid, text: elementtext}, 'child');\n    };\n\n    /**\n     * Heartland.HPS.setStyle\n     *\n     * Public API for setting an element's style.\n     *\n     * @param {string} elementid\n     * @param {string} elementstyle\n     */\n    setStyle(elementid: string, elementstyle: string): void {\n      this.Messages.post({action: 'setStyle', id: elementid, style: elementstyle}, 'child');\n    };\n\n    /**\n     * Heartland.HPS.appendStyle\n     *\n     * Public API for appending to an element's style.\n     *\n     * @param {string} elementid\n     * @param {string} elementstyle\n     */\n    appendStyle(elementid: string, elementstyle: string): void {\n      this.Messages.post({action: 'appendStyle', id: elementid, style: elementstyle}, 'child');\n    };\n\n    /**\n     * Heartland.HPS.setFocus\n     *\n     * Public API for appending to an element's style.\n     *\n     * @param {string} elementid\n     */\n    setFocus(elementid: string): void {\n      this.Messages.post({action: 'setFocus'}, elementid);\n    };\n\n    /**\n     * Heartland.HPS.dispose\n     *\n     * Removes all iframes and event listeners from the DOM.\n     */\n    dispose(): void {\n      this.Messages.dispose();\n      this.Messages = null;\n      if (this.frames.cardNumber && this.frames.cardNumber.targetNode) {\n        (<any>this.frames.cardNumber.frame).remove();\n      }\n      if (this.frames.cardExpiration && this.frames.cardExpiration.frame) {\n        (<any>this.frames.cardExpiration.frame).remove();\n      }\n      if (this.frames.cardCvv && this.frames.cardCvv.frame) {\n        (<any>this.frames.cardCvv.frame).remove();\n      }\n      if (this.frames.child && this.frames.child.frame) {\n        (<any>this.frames.child.frame).remove();\n      }\n      if (this.clickHandler) {\n        Heartland.Events.removeHandler(\n          this.options.buttonTarget,\n          'click',\n          this.clickHandler\n        );\n      }\n      if (this.loadHandler) {\n        Heartland.Events.removeHandler(\n          window,\n          'load',\n          this.loadHandler\n        );\n      }\n      if (this.receiveMessageHandlerAddedHandler) {\n        Heartland.Events.removeHandler(\n          document,\n          'receiveMessageHandlerAdded',\n          this.receiveMessageHandlerAddedHandler\n        );\n      }\n    };\n  }\n}\n"],"names":["Heartland","options","window","parent","this","Util","applyOptions","defaults","getUrlByEnv","formId","length","addFormHandler","frames","type","iframe_url","Messages","mailbox","cacheBust","Frames","configureIframe","HPS","post","action","message","publicKey","Ajax","call","frame","name","url","decodeURIComponent","document","location","hash","replace","loadHandler","hps","DOM","resizeFrame","receiveMessageHandlerAddedHandler","Events","addHandler","receive","frameHandleWith","configureFieldIframe","e","preventDefault","returnValue","split","field","shift","join","onerror","errorMsg","lineNumber","column","errorObj","data","configureField","method","Card","monitorFieldEvents","height","style","parseInt","elementid","elementtext","id","text","elementstyle","dispose","cardNumber","targetNode","remove","cardExpiration","cardCvv","child","clickHandler","removeHandler","buttonTarget"],"mappings":"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"}